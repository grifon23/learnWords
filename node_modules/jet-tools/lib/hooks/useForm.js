"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useForm = void 0;
var react_1 = require("react");
/**
 *
 * @param initValue
 * @param validateMethod  - method must validate values and return error
 * @returns
 */
exports.useForm = function (initValue, validateMethod) {
    var _a = react_1.useState(initValue), values = _a[0], setForm = _a[1];
    var _b = react_1.useState({}), errors = _b[0], setErrors = _b[1];
    var setFormError = function (f, e) {
        if (e === void 0) { e = null; }
        setErrors(function (oldErrors) {
            var _a;
            return __assign(__assign({}, oldErrors), (_a = {}, _a[f] = e, _a));
        });
    };
    var setFormField = function (f, v) {
        setForm(function (oldForm) {
            var _a;
            return __assign(__assign({}, oldForm), (_a = {}, _a[f] = v, _a));
        });
        setFormError(f, null);
    };
    var validate = function () {
        var _errors = validateMethod(values);
        if (_errors) {
            setErrors(_errors);
            return true;
        }
    };
    var onSubmit = function (callback) {
        if (validate && validate())
            return;
        callback();
    };
    return {
        values: values,
        set: setForm,
        errors: errors,
        setField: setFormField,
        setError: setFormError,
        setErrors: setErrors,
        onSubmit: onSubmit,
    };
};
