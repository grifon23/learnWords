/// <reference types="react" />
interface IProps<T> {
    limit?: number;
    page?: number;
    fetchItems: (...arr: any[]) => any;
    serrializatorResponse?: <S>(data: S) => S;
    serrializatorItems?: (items: any[]) => T[];
    loadParams?: {
        [key: string]: string | boolean;
    };
    needInit: boolean;
}
export declare const useFlatList: <T>(props: IProps<T>) => {
    items: any;
    isEmpty: boolean;
    isLoading: boolean;
    isLoadingNext: boolean;
    loadParams: import("react").MutableRefObject<{
        limit: number;
        page: number;
        count: any;
    }>;
    resetFlatList: () => void;
    loadMore: () => void;
    setLoadParams: (params: Record<string, string>) => void;
    isInit: boolean;
    _setItems: import("react").Dispatch<any>;
};
export {};
