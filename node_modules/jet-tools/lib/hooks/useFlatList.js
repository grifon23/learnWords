"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFlatList = void 0;
var react_1 = require("react");
var defaultProps = {
    limit: 20,
    page: 1,
    fetchItems: function () { return 0; } /*  axios request */,
    serrializatorResponse: function (data) { return data; },
    serrializatorItems: function (items) { return items; },
    loadParams: {},
    needInit: true,
};
var getDefaultProps = function () {
    return Object.assign({}, defaultProps);
};
exports.useFlatList = function (props) {
    if (!props.fetchItems)
        throw new Error('Use flat list need a fetchItems function');
    props = Object.assign(getDefaultProps(), props);
    var loadParams = react_1.useRef(__assign({ limit: props.limit, page: props.page, count: undefined }, props.loadParams));
    var blockLoadingRef = react_1.useRef(false);
    var _a = react_1.useState(null), items = _a[0], setItems = _a[1];
    var _b = react_1.useState(true), isLoading = _b[0], setLoading = _b[1];
    var _c = react_1.useState(false), isLoadingNext = _c[0], setIsLoadingNext = _c[1];
    var _d = react_1.useState(false), isInit = _d[0], setIsInit = _d[1];
    var fetchItems = function (firstFetch) {
        if (firstFetch === void 0) { firstFetch = false; }
        return __awaiter(void 0, void 0, void 0, function () {
            var _a, count, page, limit, response, _b, _c, fetchedItems, e_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = loadParams.current, count = _a.count, page = _a.page, limit = _a.limit;
                        if (firstFetch) {
                            setLoading(true);
                            loadParams.current.page = defaultProps.page;
                            loadParams.current.count = undefined;
                        }
                        else if (blockLoadingRef.current)
                            return [2 /*return*/];
                        else if (count && page > Math.ceil(count / limit))
                            return [2 /*return*/];
                        setIsLoadingNext(true);
                        blockLoadingRef.current = true;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        _c = (_b = props).serrializatorResponse;
                        return [4 /*yield*/, props.fetchItems({ params: loadParams.current })];
                    case 2:
                        response = _c.apply(_b, [_d.sent()]);
                        if (!response)
                            throw {};
                        loadParams.current = __assign(__assign({}, props.loadParams), { limit: loadParams.current.limit, page: loadParams.current.page + 1, count: response.data.count });
                        fetchedItems = props.serrializatorItems(response.data.items);
                        if (firstFetch)
                            setItems(fetchedItems);
                        else
                            setItems(__spreadArrays(items, fetchedItems));
                        if (!isInit)
                            setIsInit(true);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _d.sent();
                        setItems([]);
                        return [3 /*break*/, 4];
                    case 4:
                        blockLoadingRef.current = false;
                        setLoading(false);
                        setIsLoadingNext(false);
                        return [2 /*return*/];
                }
            });
        });
    };
    var resetFlatList = function () {
        fetchItems(true);
    };
    var loadMore = function () {
        fetchItems(false);
    };
    var setLoadParams = function (params) {
        loadParams.current = __assign(__assign({}, loadParams.current), params);
        fetchItems(true);
    };
    react_1.useEffect(function () {
        if (props.needInit)
            fetchItems(true);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return {
        items: items,
        isEmpty: !items || !items.length,
        isLoading: isLoading,
        isLoadingNext: isLoadingNext,
        loadParams: loadParams,
        resetFlatList: resetFlatList,
        loadMore: loadMore,
        setLoadParams: setLoadParams,
        isInit: isInit,
        _setItems: setItems,
    };
};
