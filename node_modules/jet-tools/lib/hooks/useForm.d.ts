export interface IUseFormState {
    [key: string]: string | number | boolean | any;
}
declare type IValidateMethod<T> = (data: T) => FormErrors<T>;
declare type FormErrors<T> = Partial<Record<keyof T, string>>;
/**
 * @values - form values object
 * @set - function to set values
 * @errors - form values errors, key = values key and value = error
 * @setField - set one field
 * @SetError - set one error, key = field
 * @SetErrors - set all errors
 * @onSubmit - validate and call callback
 */
export interface IForm<T> {
    values: T;
    set: (form: T) => void;
    errors: FormErrors<T>;
    setField: (key: keyof T, value: any) => any;
    setError: (key: keyof T, error: string) => void;
    setErrors: (errors: Record<keyof T, string>) => void;
    onSubmit: (callback: () => void) => () => void;
}
/**
 *
 * @param initValue
 * @param validateMethod  - method must validate values and return error
 * @returns
 */
export declare const useForm: <T extends IUseFormState>(initValue: Partial<T>, validateMethod: IValidateMethod<T>) => IForm<T>;
export {};
