"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = void 0;
var ValidatorCore = __importStar(require("validatorjs"));
var _ = __importStar(require("lodash"));
var Validator = /** @class */ (function () {
    function Validator(currentLang, messages) {
        this.initial(currentLang, messages);
    }
    Validator.prototype.initial = function (currentLang, messages) {
        var _this = this;
        if (currentLang)
            this.setLang(currentLang);
        if (_.size(messages) > 0) {
            _.forEach(messages, function (it, key) { return _this.setMessages(key, it); });
        }
    };
    Validator.prototype.setMessages = function (lang, messages) {
        ValidatorCore.setMessages(lang, messages);
    };
    Validator.prototype.setLang = function (lang) {
        ValidatorCore.useLang(lang);
    };
    Validator.prototype.validate = function (data, rules) {
        var validation = new ValidatorCore.default(data, rules);
        if (!validation.fails())
            return null;
        var errors = validation.errors.all();
        if (_.size(errors) < 1)
            return null;
        return _.reduce(errors, function (memo, value, key) {
            memo[key] = errors[key][0];
            return memo;
        }, {});
    };
    return Validator;
}());
exports.Validator = Validator;
