export declare type EventsData = Record<string, Record<string, any>>;
export declare class Events<T extends EventsData> {
    private observers;
    on<K extends keyof T>(event: K, fn: (data: T[K]) => void): void;
    off<K extends keyof T>(event: K, fn: (data: T[K]) => void): void;
    emit<K extends keyof T>(event: K, data: T[K]): void;
}
declare type GlobalEvents = {
    event: {
        data: string;
    };
};
export declare const events: Events<GlobalEvents>;
export {};
